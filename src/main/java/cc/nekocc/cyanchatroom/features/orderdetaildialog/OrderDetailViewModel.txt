package cc.nekocc.cyanchatroom.features.orderdetaildialog;

import cc.nekocc.cyanchatroom.domain.goods.AbstractGoods;
import cc.nekocc.cyanchatroom.domain.order.Order;
import cc.nekocc.cyanchatroom.domain.order.OrderStatus;
import cc.nekocc.cyanchatroom.domain.order.PaymentMethod;
import javafx.beans.property.*;
import javafx.collections.FXCollections;
import javafx.scene.control.Alert;

public class OrderDetailViewModel
{
    private final Order order_;
    private final OrderRepository order_repository_;

    public final StringProperty order_id_ = new SimpleStringProperty();
    public final StringProperty order_status_ = new SimpleStringProperty();
    public final StringProperty sender_ = new SimpleStringProperty();
    public final StringProperty receiver_ = new SimpleStringProperty();
    public final StringProperty cost_ = new SimpleStringProperty();
    public final ListProperty<AbstractGoods> goods_list_ = new SimpleListProperty<>();

    public final BooleanProperty payment_pane_visible_ = new SimpleBooleanProperty(false);
    public final ObjectProperty<PaymentMethod> selected_payment_method_ = new SimpleObjectProperty<>(null);
    public final BooleanProperty can_pay_ = new SimpleBooleanProperty(false);

    public OrderDetailViewModel(Order order, OrderRepository order_repository)
    {
        order_ = order;
        order_repository_ = order_repository;

        populateData();
        setupBindings();
    }

    private void populateData()
    {
        order_id_.set(order_.getOrderId());
        order_status_.set(order_.getOrderStatus().getDisplayName());
        sender_.set(order_.getSender().getName());
        receiver_.set(String.format("%s (%s)", order_.getReceiverName(), order_.getReceiverPhone()));
        cost_.set(String.format("%.2f 元", order_.getFinalCost()));
        goods_list_.set(FXCollections.observableArrayList(order_.getGoodsList()));
        payment_pane_visible_.set(order_.getOrderStatus() == OrderStatus.PENDING_PAYMENT);
    }

    private void setupBindings()
    {
        can_pay_.bind(payment_pane_visible_.and(selected_payment_method_.isNotNull()));
    }

    public boolean pay()
    {
        try
        {
            order_.pay();
            order_repository_.updateOrder(order_);
            showAlert(Alert.AlertType.INFORMATION, "成功", "订单 " + order_.getOrderId() + " 已通过 " + selected_payment_method_.get().getDisplayName() + " 支付成功！");
            return true;
        }
        catch (Exception e)
        {
            showAlert(Alert.AlertType.ERROR, "失败", e.getMessage());
            return false;
        }
    }

    private void showAlert(Alert.AlertType alert_type, String title, String content)
    {  }
}
